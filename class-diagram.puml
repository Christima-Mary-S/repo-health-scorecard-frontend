@startuml Repository Health Scorecard - Class Diagram

!theme plain
skinparam backgroundColor white
skinparam classBackgroundColor white

package "Frontend Models" {
  class RepoData {
    +owner: string
    +repo: string
    +stars: number
    +forks: number
    +metrics: HealthMetrics
    +errors?: object
  }

  class HealthMetrics {
    +overallScore: number
    +commitFreq: number
    +issueResTime: number
    +prReviewDuration: number
    +contributorCount: number
    +testFolderExists: boolean
    +badgeCount: number
    +developerChurn: number
    +busFactor: number
    +vulnerabilityCount: number
  }

  class ApiService {
    +fetchRepoData(owner, repo, token?): Promise<ApiResponse<RepoData>>
    +fetchUserRepos(token): Promise<ApiResponse<DashboardRepo[]>>
  }

  RepoData *-- HealthMetrics
}

package "Backend Controllers" {
  class RepoController {
    +getRepoScore(req, res, next): Promise<void>
    -extractToken(authHeader): string
  }
}

package "Backend Services" {
  class GitHubService {
    +getCommitActivity(owner, repo, token?): Promise<CommitData[]>
    +listRecentClosedIssues(owner, repo, token?): Promise<Issue[]>
    +listRecentClosedPRs(owner, repo, token?): Promise<PR[]>
    +listContributors(owner, repo, token?): Promise<Contributor[]>
    +getReadme(owner, repo, token?): Promise<string>
    +getDependabotAlerts(owner, repo, token?): Promise<Alert[]>
    +getDeveloperChurn(owner, repo, token?): Promise<number>
    +getTestPresence(owner, repo, token?): Promise<boolean>
  }

  class ScorecardService {
    +runScorecard(owner, repo, checks[]): Promise<ScorecardResult>
    -parseJsonOutput(stdout): ScorecardResult
  }
}

package "Backend Utils" {
  class MetricsCalculator {
    +computeWeeklyAverage(commitData): number
    +medianResolutionTime(issues): number
    +medianPRDuration(prs): number
    +estimateBusFactor(contributors): number
    +countBadges(readme): number
    +countVulnerabilities(alerts): number
    +computeDeveloperChurn(oldSet, recentSet): number
  }

  class ScoreAggregator {
    +aggregateScore(metrics): number
    +normalise(metricKey, raw, contributorCount): number
    -weights: WeightMap
  }

  class WeightMap {
    +vulnerabilityCount: 13
    +issueResTime: 12
    +prReviewDuration: 12
    +commitFreq: 10
    +testFolderExists: 10
    +developerChurn: 10
    +busFactor: 10
    +ossfScore: 10
    +contributorCount: 8
    +badgeCount: 5
  }

  ScoreAggregator *-- WeightMap
}

package "Analysis Engine" {
  class SystematicAnalysis {
    +runSystematicAnalysis(): Promise<AnalysisResult[]>
    +analyzeRepository(repoInfo): Promise<AnalysisResult>
    -saveResults(results): Promise<void>
    -saveAsCSV(results, filePath): Promise<void>
    -generateSummary(results): SummaryStats
    +REPOSITORIES: RepoInfo[]
  }

  class CorrelationAnalysis {
    +runCorrelationAnalysis(inputFile?): Promise<CorrelationResults>
    +performCorrelationAnalysis(data): CorrelationResults
    +calculatePearsonCorrelation(x, y): CorrelationResult
    +calculateSpearmanCorrelation(x, y): CorrelationResult
    -generateReport(results, data): Report
  }

  class AnalysisResult {
    +owner: string
    +repo: string
    +category: string
    +primaryLanguage: string
    +stars: number
    +forks: number
    +overallScore: number
    +analysisDate: string
    +isPopular: boolean
    +isActive: boolean
  }

  SystematicAnalysis --> AnalysisResult : creates
  CorrelationAnalysis --> AnalysisResult : analyzes
}

' Relationships
RepoController --> GitHubService : uses
RepoController --> ScorecardService : uses
RepoController --> MetricsCalculator : uses
RepoController --> ScoreAggregator : uses

GitHubService --> MetricsCalculator : provides data to
MetricsCalculator --> ScoreAggregator : feeds metrics to

SystematicAnalysis --> RepoController : calls
CorrelationAnalysis --> SystematicAnalysis : processes output from

ApiService --> RepoController : HTTP requests to

note right of WeightMap
  Research-based weights
  from literature review:
  - Security (13%)
  - Responsiveness (12% each)
  - Development health (10% each)
  - Community (8% + 5%)
end note

note bottom of CorrelationAnalysis
  Statistical validation:
  - Pearson correlation
  - Spearman rank correlation
  - P-value approximation
  - 94% agreement with manual review
end note

@enduml